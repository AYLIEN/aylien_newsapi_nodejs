/**
 * AYLIEN News API
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 5.1.1
 * Contact: support@aylien.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Query from './Query';

/**
 * The NestedEntity model module.
 * @module model/NestedEntity
 * @version 5.1.1
 */
class NestedEntity {
    /**
     * Constructs a new <code>NestedEntity</code>.
     * @alias module:model/NestedEntity
     */
    constructor() { 
        
        NestedEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NestedEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NestedEntity} obj Optional instance to populate.
     * @return {module:model/NestedEntity} The populated <code>NestedEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NestedEntity();

            if (data.hasOwnProperty('id')) {
                obj['id'] = Query.constructFromObject(data['id']);

                if ('id' !== 'id') {
                  Object.defineProperty(obj, 'id', {
                    get() {
                      return obj['id'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = Query.constructFromObject(data['name']);

                if ('name' !== 'name') {
                  Object.defineProperty(obj, 'name', {
                    get() {
                      return obj['name'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('surface_forms.text')) {
                obj['surface_forms.text'] = Query.constructFromObject(data['surface_forms.text']);

                if ('surface_forms.text' !== 'surfaceFormsText') {
                  Object.defineProperty(obj, 'surfaceFormsText', {
                    get() {
                      return obj['surface_forms.text'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('sentiment')) {
                obj['sentiment'] = Query.constructFromObject(data['sentiment']);

                if ('sentiment' !== 'sentiment') {
                  Object.defineProperty(obj, 'sentiment', {
                    get() {
                      return obj['sentiment'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('element')) {
                obj['element'] = Query.constructFromObject(data['element']);

                if ('element' !== 'element') {
                  Object.defineProperty(obj, 'element', {
                    get() {
                      return obj['element'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('links.wikipedia')) {
                obj['links.wikipedia'] = Query.constructFromObject(data['links.wikipedia']);

                if ('links.wikipedia' !== 'linksWikipedia') {
                  Object.defineProperty(obj, 'linksWikipedia', {
                    get() {
                      return obj['links.wikipedia'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('links.wikidata')) {
                obj['links.wikidata'] = Query.constructFromObject(data['links.wikidata']);

                if ('links.wikidata' !== 'linksWikidata') {
                  Object.defineProperty(obj, 'linksWikidata', {
                    get() {
                      return obj['links.wikidata'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('stock_ticker')) {
                obj['stock_ticker'] = Query.constructFromObject(data['stock_ticker']);

                if ('stock_ticker' !== 'stockTicker') {
                  Object.defineProperty(obj, 'stockTicker', {
                    get() {
                      return obj['stock_ticker'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = Query.constructFromObject(data['type']);

                if ('type' !== 'type') {
                  Object.defineProperty(obj, 'type', {
                    get() {
                      return obj['type'];
                    }
                  });
                }
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Query} id
 */
NestedEntity.prototype['id'] = undefined;

/**
 * @member {module:model/Query} name
 */
NestedEntity.prototype['name'] = undefined;

/**
 * @member {module:model/Query} surface_forms.text
 */
NestedEntity.prototype['surface_forms.text'] = undefined;

/**
 * @member {module:model/Query} sentiment
 */
NestedEntity.prototype['sentiment'] = undefined;

/**
 * @member {module:model/Query} element
 */
NestedEntity.prototype['element'] = undefined;

/**
 * @member {module:model/Query} links.wikipedia
 */
NestedEntity.prototype['links.wikipedia'] = undefined;

/**
 * @member {module:model/Query} links.wikidata
 */
NestedEntity.prototype['links.wikidata'] = undefined;

/**
 * @member {module:model/Query} stock_ticker
 */
NestedEntity.prototype['stock_ticker'] = undefined;

/**
 * @member {module:model/Query} type
 */
NestedEntity.prototype['type'] = undefined;






export default NestedEntity;

