/**
 * AYLIEN News API
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 5.1.1
 * Contact: support@aylien.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OneOfNestedEntityLogicals from './OneOfNestedEntityLogicals';
import Query from './Query';

/**
 * The Parameter model module.
 * @module model/Parameter
 * @version 5.1.1
 */
class Parameter {
    /**
     * Constructs a new <code>Parameter</code>.
     * @alias module:model/Parameter
     */
    constructor() { 
        
        Parameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Parameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Parameter} obj Optional instance to populate.
     * @return {module:model/Parameter} The populated <code>Parameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Parameter();

            if (data.hasOwnProperty('author.id')) {
                obj['author.id'] = Query.constructFromObject(data['author.id']);

                if ('author.id' !== 'authorId') {
                  Object.defineProperty(obj, 'authorId', {
                    get() {
                      return obj['author.id'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('author.name')) {
                obj['author.name'] = Query.constructFromObject(data['author.name']);

                if ('author.name' !== 'authorName') {
                  Object.defineProperty(obj, 'authorName', {
                    get() {
                      return obj['author.name'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = Query.constructFromObject(data['body']);

                if ('body' !== 'body') {
                  Object.defineProperty(obj, 'body', {
                    get() {
                      return obj['body'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('categories.confident')) {
                obj['categories.confident'] = Query.constructFromObject(data['categories.confident']);

                if ('categories.confident' !== 'categoriesConfident') {
                  Object.defineProperty(obj, 'categoriesConfident', {
                    get() {
                      return obj['categories.confident'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('categories.id')) {
                obj['categories.id'] = Query.constructFromObject(data['categories.id']);

                if ('categories.id' !== 'categoriesId') {
                  Object.defineProperty(obj, 'categoriesId', {
                    get() {
                      return obj['categories.id'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('categories.level')) {
                obj['categories.level'] = Query.constructFromObject(data['categories.level']);

                if ('categories.level' !== 'categoriesLevel') {
                  Object.defineProperty(obj, 'categoriesLevel', {
                    get() {
                      return obj['categories.level'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('categories.taxonomy')) {
                obj['categories.taxonomy'] = Query.constructFromObject(data['categories.taxonomy']);

                if ('categories.taxonomy' !== 'categoriesTaxonomy') {
                  Object.defineProperty(obj, 'categoriesTaxonomy', {
                    get() {
                      return obj['categories.taxonomy'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('clusters')) {
                obj['clusters'] = Query.constructFromObject(data['clusters']);

                if ('clusters' !== 'clusters') {
                  Object.defineProperty(obj, 'clusters', {
                    get() {
                      return obj['clusters'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('links.permalink')) {
                obj['links.permalink'] = Query.constructFromObject(data['links.permalink']);

                if ('links.permalink' !== 'linksPermalink') {
                  Object.defineProperty(obj, 'linksPermalink', {
                    get() {
                      return obj['links.permalink'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('entities.id')) {
                obj['entities.id'] = Query.constructFromObject(data['entities.id']);

                if ('entities.id' !== 'entitiesId') {
                  Object.defineProperty(obj, 'entitiesId', {
                    get() {
                      return obj['entities.id'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('entities.surface_forms.text')) {
                obj['entities.surface_forms.text'] = Query.constructFromObject(data['entities.surface_forms.text']);

                if ('entities.surface_forms.text' !== 'entitiesSurfaceFormsText') {
                  Object.defineProperty(obj, 'entitiesSurfaceFormsText', {
                    get() {
                      return obj['entities.surface_forms.text'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('entities.links.wikipedia')) {
                obj['entities.links.wikipedia'] = Query.constructFromObject(data['entities.links.wikipedia']);

                if ('entities.links.wikipedia' !== 'entitiesLinksWikipedia') {
                  Object.defineProperty(obj, 'entitiesLinksWikipedia', {
                    get() {
                      return obj['entities.links.wikipedia'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('entities.links.wikidata')) {
                obj['entities.links.wikidata'] = Query.constructFromObject(data['entities.links.wikidata']);

                if ('entities.links.wikidata' !== 'entitiesLinksWikidata') {
                  Object.defineProperty(obj, 'entitiesLinksWikidata', {
                    get() {
                      return obj['entities.links.wikidata'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('entities.title.surface_forms.text')) {
                obj['entities.title.surface_forms.text'] = Query.constructFromObject(data['entities.title.surface_forms.text']);

                if ('entities.title.surface_forms.text' !== 'entitiesTitleSurfaceFormsText') {
                  Object.defineProperty(obj, 'entitiesTitleSurfaceFormsText', {
                    get() {
                      return obj['entities.title.surface_forms.text'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('entities.body.surface_forms.text')) {
                obj['entities.body.surface_forms.text'] = Query.constructFromObject(data['entities.body.surface_forms.text']);

                if ('entities.body.surface_forms.text' !== 'entitiesBodySurfaceFormsText') {
                  Object.defineProperty(obj, 'entitiesBodySurfaceFormsText', {
                    get() {
                      return obj['entities.body.surface_forms.text'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = Query.constructFromObject(data['id']);

                if ('id' !== 'id') {
                  Object.defineProperty(obj, 'id', {
                    get() {
                      return obj['id'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = Query.constructFromObject(data['language']);

                if ('language' !== 'language') {
                  Object.defineProperty(obj, 'language', {
                    get() {
                      return obj['language'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('media.images.content.length.max')) {
                obj['media.images.content.length.max'] = Query.constructFromObject(data['media.images.content.length.max']);

                if ('media.images.content.length.max' !== 'mediaImagesContentLengthMax') {
                  Object.defineProperty(obj, 'mediaImagesContentLengthMax', {
                    get() {
                      return obj['media.images.content.length.max'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('media.images.content.length.min')) {
                obj['media.images.content.length.min'] = Query.constructFromObject(data['media.images.content.length.min']);

                if ('media.images.content.length.min' !== 'mediaImagesContentLengthMin') {
                  Object.defineProperty(obj, 'mediaImagesContentLengthMin', {
                    get() {
                      return obj['media.images.content.length.min'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('media.images.count.max')) {
                obj['media.images.count.max'] = Query.constructFromObject(data['media.images.count.max']);

                if ('media.images.count.max' !== 'mediaImagesCountMax') {
                  Object.defineProperty(obj, 'mediaImagesCountMax', {
                    get() {
                      return obj['media.images.count.max'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('media.images.count.min')) {
                obj['media.images.count.min'] = Query.constructFromObject(data['media.images.count.min']);

                if ('media.images.count.min' !== 'mediaImagesCountMin') {
                  Object.defineProperty(obj, 'mediaImagesCountMin', {
                    get() {
                      return obj['media.images.count.min'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('media.images.format')) {
                obj['media.images.format'] = Query.constructFromObject(data['media.images.format']);

                if ('media.images.format' !== 'mediaImagesFormat') {
                  Object.defineProperty(obj, 'mediaImagesFormat', {
                    get() {
                      return obj['media.images.format'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('media.images.height.max')) {
                obj['media.images.height.max'] = Query.constructFromObject(data['media.images.height.max']);

                if ('media.images.height.max' !== 'mediaImagesHeightMax') {
                  Object.defineProperty(obj, 'mediaImagesHeightMax', {
                    get() {
                      return obj['media.images.height.max'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('media.images.height.min')) {
                obj['media.images.height.min'] = Query.constructFromObject(data['media.images.height.min']);

                if ('media.images.height.min' !== 'mediaImagesHeightMin') {
                  Object.defineProperty(obj, 'mediaImagesHeightMin', {
                    get() {
                      return obj['media.images.height.min'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('media.images.width.max')) {
                obj['media.images.width.max'] = Query.constructFromObject(data['media.images.width.max']);

                if ('media.images.width.max' !== 'mediaImagesWidthMax') {
                  Object.defineProperty(obj, 'mediaImagesWidthMax', {
                    get() {
                      return obj['media.images.width.max'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('media.images.width.min')) {
                obj['media.images.width.min'] = Query.constructFromObject(data['media.images.width.min']);

                if ('media.images.width.min' !== 'mediaImagesWidthMin') {
                  Object.defineProperty(obj, 'mediaImagesWidthMin', {
                    get() {
                      return obj['media.images.width.min'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('media.videos.count.max')) {
                obj['media.videos.count.max'] = Query.constructFromObject(data['media.videos.count.max']);

                if ('media.videos.count.max' !== 'mediaVideosCountMax') {
                  Object.defineProperty(obj, 'mediaVideosCountMax', {
                    get() {
                      return obj['media.videos.count.max'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('media.videos.count.min')) {
                obj['media.videos.count.min'] = Query.constructFromObject(data['media.videos.count.min']);

                if ('media.videos.count.min' !== 'mediaVideosCountMin') {
                  Object.defineProperty(obj, 'mediaVideosCountMin', {
                    get() {
                      return obj['media.videos.count.min'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('sentiment.body.polarity')) {
                obj['sentiment.body.polarity'] = Query.constructFromObject(data['sentiment.body.polarity']);

                if ('sentiment.body.polarity' !== 'sentimentBodyPolarity') {
                  Object.defineProperty(obj, 'sentimentBodyPolarity', {
                    get() {
                      return obj['sentiment.body.polarity'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('sentiment.title.polarity')) {
                obj['sentiment.title.polarity'] = Query.constructFromObject(data['sentiment.title.polarity']);

                if ('sentiment.title.polarity' !== 'sentimentTitlePolarity') {
                  Object.defineProperty(obj, 'sentimentTitlePolarity', {
                    get() {
                      return obj['sentiment.title.polarity'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('social.shares.count.facebook.max')) {
                obj['social.shares.count.facebook.max'] = Query.constructFromObject(data['social.shares.count.facebook.max']);

                if ('social.shares.count.facebook.max' !== 'socialSharesCountFacebookMax') {
                  Object.defineProperty(obj, 'socialSharesCountFacebookMax', {
                    get() {
                      return obj['social.shares.count.facebook.max'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('social.shares.count.facebook.min')) {
                obj['social.shares.count.facebook.min'] = Query.constructFromObject(data['social.shares.count.facebook.min']);

                if ('social.shares.count.facebook.min' !== 'socialSharesCountFacebookMin') {
                  Object.defineProperty(obj, 'socialSharesCountFacebookMin', {
                    get() {
                      return obj['social.shares.count.facebook.min'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('social.shares.count.reddit.max')) {
                obj['social.shares.count.reddit.max'] = Query.constructFromObject(data['social.shares.count.reddit.max']);

                if ('social.shares.count.reddit.max' !== 'socialSharesCountRedditMax') {
                  Object.defineProperty(obj, 'socialSharesCountRedditMax', {
                    get() {
                      return obj['social.shares.count.reddit.max'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('social.shares.count.reddit.min')) {
                obj['social.shares.count.reddit.min'] = Query.constructFromObject(data['social.shares.count.reddit.min']);

                if ('social.shares.count.reddit.min' !== 'socialSharesCountRedditMin') {
                  Object.defineProperty(obj, 'socialSharesCountRedditMin', {
                    get() {
                      return obj['social.shares.count.reddit.min'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.domain')) {
                obj['source.domain'] = Query.constructFromObject(data['source.domain']);

                if ('source.domain' !== 'sourceDomain') {
                  Object.defineProperty(obj, 'sourceDomain', {
                    get() {
                      return obj['source.domain'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.id')) {
                obj['source.id'] = Query.constructFromObject(data['source.id']);

                if ('source.id' !== 'sourceId') {
                  Object.defineProperty(obj, 'sourceId', {
                    get() {
                      return obj['source.id'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.links.in.count.max')) {
                obj['source.links.in.count.max'] = Query.constructFromObject(data['source.links.in.count.max']);

                if ('source.links.in.count.max' !== 'sourceLinksInCountMax') {
                  Object.defineProperty(obj, 'sourceLinksInCountMax', {
                    get() {
                      return obj['source.links.in.count.max'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.links.in.count.min')) {
                obj['source.links.in.count.min'] = Query.constructFromObject(data['source.links.in.count.min']);

                if ('source.links.in.count.min' !== 'sourceLinksInCountMin') {
                  Object.defineProperty(obj, 'sourceLinksInCountMin', {
                    get() {
                      return obj['source.links.in.count.min'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.locations.city')) {
                obj['source.locations.city'] = Query.constructFromObject(data['source.locations.city']);

                if ('source.locations.city' !== 'sourceLocationsCity') {
                  Object.defineProperty(obj, 'sourceLocationsCity', {
                    get() {
                      return obj['source.locations.city'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.locations.country')) {
                obj['source.locations.country'] = Query.constructFromObject(data['source.locations.country']);

                if ('source.locations.country' !== 'sourceLocationsCountry') {
                  Object.defineProperty(obj, 'sourceLocationsCountry', {
                    get() {
                      return obj['source.locations.country'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.locations.state')) {
                obj['source.locations.state'] = Query.constructFromObject(data['source.locations.state']);

                if ('source.locations.state' !== 'sourceLocationsState') {
                  Object.defineProperty(obj, 'sourceLocationsState', {
                    get() {
                      return obj['source.locations.state'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.rankings.alexa.country')) {
                obj['source.rankings.alexa.country'] = Query.constructFromObject(data['source.rankings.alexa.country']);

                if ('source.rankings.alexa.country' !== 'sourceRankingsAlexaCountry') {
                  Object.defineProperty(obj, 'sourceRankingsAlexaCountry', {
                    get() {
                      return obj['source.rankings.alexa.country'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.rankings.alexa.rank.max')) {
                obj['source.rankings.alexa.rank.max'] = Query.constructFromObject(data['source.rankings.alexa.rank.max']);

                if ('source.rankings.alexa.rank.max' !== 'sourceRankingsAlexaRankMax') {
                  Object.defineProperty(obj, 'sourceRankingsAlexaRankMax', {
                    get() {
                      return obj['source.rankings.alexa.rank.max'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.rankings.alexa.rank.min')) {
                obj['source.rankings.alexa.rank.min'] = Query.constructFromObject(data['source.rankings.alexa.rank.min']);

                if ('source.rankings.alexa.rank.min' !== 'sourceRankingsAlexaRankMin') {
                  Object.defineProperty(obj, 'sourceRankingsAlexaRankMin', {
                    get() {
                      return obj['source.rankings.alexa.rank.min'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.scopes.city')) {
                obj['source.scopes.city'] = Query.constructFromObject(data['source.scopes.city']);

                if ('source.scopes.city' !== 'sourceScopesCity') {
                  Object.defineProperty(obj, 'sourceScopesCity', {
                    get() {
                      return obj['source.scopes.city'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.scopes.country')) {
                obj['source.scopes.country'] = Query.constructFromObject(data['source.scopes.country']);

                if ('source.scopes.country' !== 'sourceScopesCountry') {
                  Object.defineProperty(obj, 'sourceScopesCountry', {
                    get() {
                      return obj['source.scopes.country'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.scopes.level')) {
                obj['source.scopes.level'] = Query.constructFromObject(data['source.scopes.level']);

                if ('source.scopes.level' !== 'sourceScopesLevel') {
                  Object.defineProperty(obj, 'sourceScopesLevel', {
                    get() {
                      return obj['source.scopes.level'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('source.scopes.state')) {
                obj['source.scopes.state'] = Query.constructFromObject(data['source.scopes.state']);

                if ('source.scopes.state' !== 'sourceScopesState') {
                  Object.defineProperty(obj, 'sourceScopesState', {
                    get() {
                      return obj['source.scopes.state'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('story_url')) {
                obj['story_url'] = Query.constructFromObject(data['story_url']);

                if ('story_url' !== 'storyUrl') {
                  Object.defineProperty(obj, 'storyUrl', {
                    get() {
                      return obj['story_url'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('story_language')) {
                obj['story_language'] = Query.constructFromObject(data['story_language']);

                if ('story_language' !== 'storyLanguage') {
                  Object.defineProperty(obj, 'storyLanguage', {
                    get() {
                      return obj['story_language'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = Query.constructFromObject(data['text']);

                if ('text' !== 'text') {
                  Object.defineProperty(obj, 'text', {
                    get() {
                      return obj['text'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = Query.constructFromObject(data['title']);

                if ('title' !== 'title') {
                  Object.defineProperty(obj, 'title', {
                    get() {
                      return obj['title'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('translations.en.body')) {
                obj['translations.en.body'] = Query.constructFromObject(data['translations.en.body']);

                if ('translations.en.body' !== 'translationsEnBody') {
                  Object.defineProperty(obj, 'translationsEnBody', {
                    get() {
                      return obj['translations.en.body'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('translations.en.text')) {
                obj['translations.en.text'] = Query.constructFromObject(data['translations.en.text']);

                if ('translations.en.text' !== 'translationsEnText') {
                  Object.defineProperty(obj, 'translationsEnText', {
                    get() {
                      return obj['translations.en.text'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('translations.en.title')) {
                obj['translations.en.title'] = Query.constructFromObject(data['translations.en.title']);

                if ('translations.en.title' !== 'translationsEnTitle') {
                  Object.defineProperty(obj, 'translationsEnTitle', {
                    get() {
                      return obj['translations.en.title'];
                    }
                  });
                }
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiClient.convertToType(data['entity'], OneOfNestedEntityLogicals);

                if ('entity' !== 'entity') {
                  Object.defineProperty(obj, 'entity', {
                    get() {
                      return obj['entity'];
                    }
                  });
                }
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Query} author.id
 */
Parameter.prototype['author.id'] = undefined;

/**
 * @member {module:model/Query} author.name
 */
Parameter.prototype['author.name'] = undefined;

/**
 * @member {module:model/Query} body
 */
Parameter.prototype['body'] = undefined;

/**
 * @member {module:model/Query} categories.confident
 */
Parameter.prototype['categories.confident'] = undefined;

/**
 * @member {module:model/Query} categories.id
 */
Parameter.prototype['categories.id'] = undefined;

/**
 * @member {module:model/Query} categories.level
 */
Parameter.prototype['categories.level'] = undefined;

/**
 * @member {module:model/Query} categories.taxonomy
 */
Parameter.prototype['categories.taxonomy'] = undefined;

/**
 * @member {module:model/Query} clusters
 */
Parameter.prototype['clusters'] = undefined;

/**
 * @member {module:model/Query} links.permalink
 */
Parameter.prototype['links.permalink'] = undefined;

/**
 * @member {module:model/Query} entities.id
 */
Parameter.prototype['entities.id'] = undefined;

/**
 * @member {module:model/Query} entities.surface_forms.text
 */
Parameter.prototype['entities.surface_forms.text'] = undefined;

/**
 * @member {module:model/Query} entities.links.wikipedia
 */
Parameter.prototype['entities.links.wikipedia'] = undefined;

/**
 * @member {module:model/Query} entities.links.wikidata
 */
Parameter.prototype['entities.links.wikidata'] = undefined;

/**
 * @member {module:model/Query} entities.title.surface_forms.text
 */
Parameter.prototype['entities.title.surface_forms.text'] = undefined;

/**
 * @member {module:model/Query} entities.body.surface_forms.text
 */
Parameter.prototype['entities.body.surface_forms.text'] = undefined;

/**
 * @member {module:model/Query} id
 */
Parameter.prototype['id'] = undefined;

/**
 * @member {module:model/Query} language
 */
Parameter.prototype['language'] = undefined;

/**
 * @member {module:model/Query} media.images.content.length.max
 */
Parameter.prototype['media.images.content.length.max'] = undefined;

/**
 * @member {module:model/Query} media.images.content.length.min
 */
Parameter.prototype['media.images.content.length.min'] = undefined;

/**
 * @member {module:model/Query} media.images.count.max
 */
Parameter.prototype['media.images.count.max'] = undefined;

/**
 * @member {module:model/Query} media.images.count.min
 */
Parameter.prototype['media.images.count.min'] = undefined;

/**
 * @member {module:model/Query} media.images.format
 */
Parameter.prototype['media.images.format'] = undefined;

/**
 * @member {module:model/Query} media.images.height.max
 */
Parameter.prototype['media.images.height.max'] = undefined;

/**
 * @member {module:model/Query} media.images.height.min
 */
Parameter.prototype['media.images.height.min'] = undefined;

/**
 * @member {module:model/Query} media.images.width.max
 */
Parameter.prototype['media.images.width.max'] = undefined;

/**
 * @member {module:model/Query} media.images.width.min
 */
Parameter.prototype['media.images.width.min'] = undefined;

/**
 * @member {module:model/Query} media.videos.count.max
 */
Parameter.prototype['media.videos.count.max'] = undefined;

/**
 * @member {module:model/Query} media.videos.count.min
 */
Parameter.prototype['media.videos.count.min'] = undefined;

/**
 * @member {module:model/Query} sentiment.body.polarity
 */
Parameter.prototype['sentiment.body.polarity'] = undefined;

/**
 * @member {module:model/Query} sentiment.title.polarity
 */
Parameter.prototype['sentiment.title.polarity'] = undefined;

/**
 * @member {module:model/Query} social.shares.count.facebook.max
 */
Parameter.prototype['social.shares.count.facebook.max'] = undefined;

/**
 * @member {module:model/Query} social.shares.count.facebook.min
 */
Parameter.prototype['social.shares.count.facebook.min'] = undefined;

/**
 * @member {module:model/Query} social.shares.count.reddit.max
 */
Parameter.prototype['social.shares.count.reddit.max'] = undefined;

/**
 * @member {module:model/Query} social.shares.count.reddit.min
 */
Parameter.prototype['social.shares.count.reddit.min'] = undefined;

/**
 * @member {module:model/Query} source.domain
 */
Parameter.prototype['source.domain'] = undefined;

/**
 * @member {module:model/Query} source.id
 */
Parameter.prototype['source.id'] = undefined;

/**
 * @member {module:model/Query} source.links.in.count.max
 */
Parameter.prototype['source.links.in.count.max'] = undefined;

/**
 * @member {module:model/Query} source.links.in.count.min
 */
Parameter.prototype['source.links.in.count.min'] = undefined;

/**
 * @member {module:model/Query} source.locations.city
 */
Parameter.prototype['source.locations.city'] = undefined;

/**
 * @member {module:model/Query} source.locations.country
 */
Parameter.prototype['source.locations.country'] = undefined;

/**
 * @member {module:model/Query} source.locations.state
 */
Parameter.prototype['source.locations.state'] = undefined;

/**
 * @member {module:model/Query} source.rankings.alexa.country
 */
Parameter.prototype['source.rankings.alexa.country'] = undefined;

/**
 * @member {module:model/Query} source.rankings.alexa.rank.max
 */
Parameter.prototype['source.rankings.alexa.rank.max'] = undefined;

/**
 * @member {module:model/Query} source.rankings.alexa.rank.min
 */
Parameter.prototype['source.rankings.alexa.rank.min'] = undefined;

/**
 * @member {module:model/Query} source.scopes.city
 */
Parameter.prototype['source.scopes.city'] = undefined;

/**
 * @member {module:model/Query} source.scopes.country
 */
Parameter.prototype['source.scopes.country'] = undefined;

/**
 * @member {module:model/Query} source.scopes.level
 */
Parameter.prototype['source.scopes.level'] = undefined;

/**
 * @member {module:model/Query} source.scopes.state
 */
Parameter.prototype['source.scopes.state'] = undefined;

/**
 * @member {module:model/Query} story_url
 */
Parameter.prototype['story_url'] = undefined;

/**
 * @member {module:model/Query} story_language
 */
Parameter.prototype['story_language'] = undefined;

/**
 * @member {module:model/Query} text
 */
Parameter.prototype['text'] = undefined;

/**
 * @member {module:model/Query} title
 */
Parameter.prototype['title'] = undefined;

/**
 * @member {module:model/Query} translations.en.body
 */
Parameter.prototype['translations.en.body'] = undefined;

/**
 * @member {module:model/Query} translations.en.text
 */
Parameter.prototype['translations.en.text'] = undefined;

/**
 * @member {module:model/Query} translations.en.title
 */
Parameter.prototype['translations.en.title'] = undefined;

/**
 * @member {module:model/OneOfNestedEntityLogicals} entity
 */
Parameter.prototype['entity'] = undefined;






export default Parameter;

