/**
 * AYLIEN News API
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@aylien.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Autocompletes from '../model/Autocompletes';
import Errors from '../model/Errors';

/**
* Autocomplete service.
* @module api/AutocompleteApi
* @version 4.0.0
*/
export default class AutocompleteApi {

    /**
    * Constructs a new AutocompleteApi. 
    * @alias module:api/AutocompleteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listAutocompletes operation.
     * @callback module:api/AutocompleteApi~listAutocompletesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Autocompletes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List autocompletes
     * The autocompletes endpoint a string of characters provided to it, and then returns suggested terms that are the most likely full words or strings. The terms returned by the News API are based on parameters the type parameters you can see below. For example, if you provide the autocompletes endpoint with the term `New York C` and select the type `dbpedia_resources`, the API will return links to the DBpedia resources `New_York_City`, `New_York_City_Subway`, `New_York_City_Police_Department`, and so on. 
     * @param {module:model/String} type This parameter is used for defining the type of autocompletes. 
     * @param {String} term This parameter is used for finding autocomplete objects that contain the specified value. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.language This parameter is used for autocompletes whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes.  (default to 'en')
     * @param {Number} opts.perPage This parameter is used for specifying number of items in each page.  (default to 3)
     * @param {module:api/AutocompleteApi~listAutocompletesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Autocompletes}
     */
    listAutocompletes(type, term, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listAutocompletes");
      }
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling listAutocompletes");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'term': term,
        'language': opts['language'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['app_id', 'app_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/xml'];
      let returnType = Autocompletes;
      return this.apiClient.callApi(
        '/autocompletes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
